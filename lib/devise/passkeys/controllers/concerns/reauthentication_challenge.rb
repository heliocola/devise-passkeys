# frozen_string_literal: true

module Devise
  module Passkeys
    module Controllers
      module Concerns
        # This concern is responsible for storing the reauthentication challenge in the session.
        #
        # A reauthentication challenge is a WebAuthn challenge exchange (i.e. authentication)
        # to verify the user's identity and confirm they're able to perform a sensitive action
        # by performing the entire authentication process.
        #
        # This can be used for scenarios such as:
        #
        # - Adding a new passkey
        # - Deleting a passkey
        # - Performing sensitive actions inside your application
        #
        # You can customize which reauthentication challenge you're using by changing
        # the `passkey_reauthentication_challenge_session_key` method after including this concern
        #
        # @see Devise::Passkeys::Controllers::ReauthenticationControllerConcern
        module ReauthenticationChallenge
          extend ActiveSupport::Concern

          # This method is responsible for generating the key that will be used to store the
          # reauthentication challenge in the session hash.
          #
          # @return [String] The reauthentication challenge session key
          def passkey_reauthentication_challenge_session_key
            "#{resource_name}_current_reauthentication_challenge"
          end

          # This method is responsible for storing the reauthentication challenge in the session.
          #
          # @param [WebAuthn::PublicKeyCredential::RequestOptions] options_for_authentication the options for authentication,
          #         generated by `webauthn-ruby`
          # @return [String] The reauthentication challenge
          # @see Devise::Passkeys::Controllers::ReauthenticationControllerConcern#new_challenge
          def store_reauthentication_challenge_in_session(options_for_authentication:)
            session[passkey_reauthentication_challenge_session_key] = options_for_authentication.challenge
          end
        end
      end
    end
  end
end
